And we're going to do some reverse-engineering! 
Because there are no looping constructs, this program is exactly twenty-seven instructions long. It also never overwrites an opcode.
I can reverse-engineer this.

Start state:

(0)
1,N,V,3, 1,1,2,3, 1,3,4,3, 1,5,0,3,
(16)
2,1,6,19, 1,9,19,23, 2,23,10,27, 1,27,5,31,
(32)
1,31,6,35, 1,6,35,39, 2,39,13,43, 1,9,43,47,
(48)
2,9,47,51, 1,51,6,55, 2,55,10,59, 1,59,5,63,
(64)
2,10,63,67, 2,9,67,71, 1,71,5,75, 2,10,75,79,
(80)
1,79,6,83, 2,10,83,87, 1,5,87,91, 2,9,91,95,
(96)
1,95,5,99, 1,99,2,103, 1,103,13,0, 99,2,14,0,
(112)
0

1) add [N] and [V], store in [3]
2) add N and V, store in [3] (N+V, overwrites last result)
3) [3] += 1 ([4] is const 1)
4) ...overwrite [3] with const 2? (5 is const 1, 0 is const 1)

And then we're into a cascade - all the opcodes until 96 overwrite their own optr with the result, 
and pull the result from the previous opcode as one of their operands.

Cells we care about: [5] = 1, [6] = 2, [9] = 3, [10] = 4, [13] = 5

5) X = N * 2
6) X += 3
7) X *= 4
8) X += 1
9) X += 2
10) X += 2
11) X *= 5
12) X += 3
13) X *= 3
14) X += 2
15) X *= 4
16) X += 1
17) X *= 4
18) X *= 3
19) X += 1
20) X *= 4
21) X += 2
22) X *= 4
23) X += 1
24) X *= 3
25) X += 1
26) X += V
27) X += 5, store in 0
28 (end)

To try to simplify...

5) X = N * 2
6) X += 3
7) X *= 4
8) X += 5
11) X *= 5
12) X += 3
13) X *= 3
14) X += 2
15) X *= 4
16) X += 1
17) X *= 12
19) X += 1
20) X *= 4
21) X += 2
22) X *= 4
23) X += 1
24) X *= 3
25) X += 1
26) X += V
27) X += 5, store in 0
28 (end)

So, we're looking for N and V that result in 19690720 . 